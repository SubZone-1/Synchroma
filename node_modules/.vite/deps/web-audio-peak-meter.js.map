{
  "version": 3,
  "sources": ["../../web-audio-peak-meter/src/utils.js", "../../web-audio-peak-meter/src/markup.js", "../../web-audio-peak-meter/src/peak-sample.js", "../../web-audio-peak-meter/src/true-peak.js", "../../web-audio-peak-meter/src/index.js"],
  "sourcesContent": ["const debugMode = false;\n\nfunction log(...args) {\n  if (debugMode) {\n    console.log(...args);\n  }\n}\n\nfunction getBaseLog(x, y) {\n  return Math.log(y) / Math.log(x);\n}\n\nfunction dbFromFloat(floatVal) {\n  return getBaseLog(10, floatVal) * 20;\n}\n\nfunction findAudioProcBufferSize(numSamplesIn) {\n  return [256, 512, 1024, 2048, 4096, 8192, 16384].reduce((a, b) => (\n    Math.abs(b - numSamplesIn) < Math.abs(a - numSamplesIn) ? b : a));\n}\n\nmodule.exports = {\n  log,\n  dbFromFloat,\n  findAudioProcBufferSize,\n};\n", "const utils = require('./utils');\n\nfunction audioClipPath(db, dbRange, vertical) {\n  let clipPercent = Math.floor((db * -100) / dbRange);\n  if (clipPercent > 100) {\n    clipPercent = 100;\n  }\n  if (clipPercent < 0) {\n    clipPercent = 0;\n  }\n  if (vertical) {\n    return `inset(${clipPercent}% 0 0)`;\n  }\n  return `inset(0 ${clipPercent}% 0 0)`;\n}\n\nfunction createContainerDiv(parent, config) {\n  const { clientWidth, clientHeight } = parent;\n  const { backgroundColor } = config;\n  const meterElement = document.createElement('div');\n  meterElement.style.position = 'relative';\n  meterElement.style.width = `${clientWidth}px`;\n  meterElement.style.height = `${clientHeight}px`;\n  meterElement.style.backgroundColor = backgroundColor;\n  parent.appendChild(meterElement);\n  return meterElement;\n}\n\nfunction createTicks(parent, config) {\n  const { clientWidth, clientHeight } = parent;\n  const {\n    dbRange, dbTickSize, fontSize, borderSize, tickColor,\n  } = config;\n  const numTicks = Math.floor(dbRange / dbTickSize);\n  const tickDivs = Array.from(Array(numTicks).keys()).map((i) => {\n    const tickDiv = document.createElement('div');\n    parent.appendChild(tickDiv);\n    tickDiv.style.position = 'absolute';\n    tickDiv.style.color = tickColor;\n    tickDiv.style.textAlign = 'right';\n    tickDiv.style.fontSize = `${fontSize}px`;\n    tickDiv.textContent = `-${dbTickSize * i}`;\n    return tickDiv;\n  });\n  const vertical = clientHeight > clientWidth;\n  if (vertical) {\n    const tickWidth = fontSize * 2.0;\n    const meterTop = fontSize * 1.5 + borderSize;\n    const dbTickTop = fontSize + borderSize;\n    const meterHeight = clientHeight - meterTop - borderSize;\n    const meterWidth = clientWidth - tickWidth - borderSize;\n    const tickSpacing = meterHeight / numTicks;\n    tickDivs.forEach((tickDiv, i) => {\n      tickDiv.style.width = `${tickWidth}px`;\n      tickDiv.style.top = `${(tickSpacing * i) + dbTickTop}px`;\n    });\n    return {\n      vertical, tickWidth, meterHeight, meterWidth, meterTop,\n    };\n  }\n  const tickWidth = fontSize * 1.5;\n  const meterHeight = (clientHeight - tickWidth) - (borderSize * 2);\n  const meterTop = fontSize * 3;\n  const meterWidth = (clientWidth - meterTop) - (borderSize * 2);\n  const tickSpacing = meterWidth / numTicks;\n  tickDivs.forEach((tickDiv, i) => {\n    tickDiv.style.width = `${meterTop}px`;\n    tickDiv.style.bottom = `${borderSize}px`;\n    tickDiv.style.right = `${(tickSpacing * i) + meterTop}px`;\n  });\n  return {\n    vertical, tickWidth, meterHeight, meterWidth, meterTop,\n  };\n}\n\nfunction createBars(parent, config, meterData) {\n  const { gradient, borderSize } = config;\n  const {\n    channelCount, vertical, meterWidth, meterHeight, meterTop, tickWidth,\n  } = meterData;\n  // const initialClipPath = audioClipPath(dbRange, dbRange, vertical);\n  const barDivs = Array.from(Array(channelCount).keys()).map(() => {\n    const barDiv = document.createElement('div');\n    parent.appendChild(barDiv);\n    barDiv.style.position = 'absolute';\n    // barDiv.style.clipPath = initialClipPath;\n    // barDiv.style.WebkitClipPath = initialClipPath;\n    return barDiv;\n  });\n  if (vertical) {\n    const barWidth = (meterWidth / channelCount) - borderSize;\n    const gradientStyle = `linear-gradient(to bottom, ${gradient.join(', ')})`;\n    barDivs.forEach((barDiv, i) => {\n      barDiv.style.height = `${meterHeight}px`;\n      barDiv.style.width = `${barWidth}px`;\n      barDiv.style.backgroundImage = gradientStyle;\n      barDiv.style.top = `${meterTop}px`;\n      barDiv.style.left = `${((barWidth + borderSize) * i) + tickWidth + borderSize}px`;\n    });\n  } else {\n    const barWidth = (meterHeight / channelCount) - borderSize;\n    const gradientStyle = `linear-gradient(to left, ${gradient.join(', ')})`;\n    barDivs.forEach((barDiv, i) => {\n      barDiv.style.height = `${barWidth}px`;\n      barDiv.style.width = `${meterWidth}px`;\n      barDiv.style.backgroundImage = gradientStyle;\n      barDiv.style.top = `${((barWidth + borderSize) * i) + borderSize}px`;\n      barDiv.style.right = `${meterTop}px`;\n    });\n  }\n  return barDivs;\n}\n\nfunction createMasks(parent, config, meterData) {\n  const { backgroundColor, borderSize, maskTransition } = config;\n  const {\n    channelCount, vertical, meterWidth, meterHeight, meterTop, tickWidth,\n  } = meterData;\n  const barDivs = Array.from(Array(channelCount).keys()).map(() => {\n    const barDiv = document.createElement('div');\n    parent.appendChild(barDiv);\n    barDiv.style.position = 'absolute';\n    barDiv.style.backgroundColor = backgroundColor;\n    return barDiv;\n  });\n  if (vertical) {\n    const barWidth = (meterWidth / channelCount) - borderSize;\n    barDivs.forEach((barDiv, i) => {\n      barDiv.style.height = `${meterHeight}px`;\n      barDiv.style.width = `${barWidth}px`;\n      barDiv.style.top = `${meterTop}px`;\n      barDiv.style.left = `${((barWidth + borderSize) * i) + tickWidth + borderSize}px`;\n      barDiv.style.transition = `height ${maskTransition}`;\n    });\n  } else {\n    const barWidth = (meterHeight / channelCount) - borderSize;\n    barDivs.forEach((barDiv, i) => {\n      barDiv.style.height = `${barWidth}px`;\n      barDiv.style.width = `${meterWidth}px`;\n      barDiv.style.top = `${((barWidth + borderSize) * i) + borderSize}px`;\n      barDiv.style.right = `${meterTop}px`;\n      barDiv.style.transition = `width ${maskTransition}`;\n    });\n  }\n  return barDivs;\n}\n\nfunction createPeakLabels(parent, config, meterData) {\n  const { borderSize, labelColor, fontSize } = config;\n  const {\n    channelCount, vertical, meterWidth, meterHeight, tickWidth,\n  } = meterData;\n  const labelDivs = Array.from(Array(channelCount).keys()).map(() => {\n    const label = document.createElement('div');\n    parent.appendChild(label);\n    label.style.textAlign = 'center';\n    label.style.color = labelColor;\n    label.style.fontSize = `${fontSize}px`;\n    label.style.position = 'absolute';\n    label.textContent = '-∞';\n    return label;\n  });\n  if (vertical) {\n    const barWidth = meterWidth / channelCount;\n    labelDivs.forEach((label, i) => {\n      label.style.width = `${barWidth}px`;\n      label.style.top = `${borderSize}px`;\n      label.style.left = `${(barWidth * i) + tickWidth}px`;\n    });\n  } else {\n    const barHeight = meterHeight / channelCount;\n    labelDivs.forEach((label, i) => {\n      label.style.width = `${fontSize * 2}px`;\n      label.style.right = `${borderSize}px`;\n      label.style.top = `${(barHeight * i) + tickWidth}px`;\n    });\n  }\n  return labelDivs;\n}\n\nfunction maskSize(floatVal, dbRange, meterDimension) {\n  const d = dbRange * -1;\n  const numPx = Math.floor((utils.dbFromFloat(floatVal) * meterDimension) / d);\n  if (numPx > meterDimension) {\n    return meterDimension;\n  }\n  if (numPx < 0) {\n    return 0;\n  }\n  return numPx;\n}\n\nfunction paintMeter(config, meterData) {\n  const { dbRange } = config;\n  const {\n    tempPeaks, heldPeaks, channelMasks, textLabels, meterHeight, meterWidth, vertical,\n  } = meterData;\n  // hopefully some day transition will work for clip path.\n  // until then we use a mask div.\n  // channelBars.forEach((barDiv, i) => {\n  //   const tempPeak = utils.dbFromFloat(tempPeaks[i]);\n  //   const clipPath = audioClipPath(tempPeak, dbRange, vertical);\n  //   barDiv.style.clipPath = clipPath;\n  //   barDiv.style.WebkitClipPath = clipPath;\n  // });\n  const meterDimension = vertical ? meterHeight : meterWidth;\n  channelMasks.forEach((maskDiv, i) => {\n    const channelSize = maskSize(tempPeaks[i], dbRange, meterDimension);\n    if (vertical) {\n      maskDiv.style.height = `${channelSize}px`;\n    } else {\n      maskDiv.style.width = `${channelSize}px`;\n    }\n  });\n  textLabels.forEach((textLabel, i) => {\n    if (heldPeaks[i] === 0.0) {\n      textLabel.textContent = '-∞';\n    } else {\n      const heldPeak = utils.dbFromFloat(heldPeaks[i]);\n      textLabel.textContent = heldPeak.toFixed(1);\n    }\n  });\n  window.requestAnimationFrame(() => paintMeter(config, meterData));\n}\n\nmodule.exports = {\n  audioClipPath,\n  createContainerDiv,\n  createTicks,\n  createBars,\n  createMasks,\n  createPeakLabels,\n  maskSize,\n  paintMeter,\n};\n", "function calculateMaxValues(inputBuffer) {\n  const channelMaxes = [];\n  const { numberOfChannels } = inputBuffer;\n\n  for (let c = 0; c < numberOfChannels; c += 1) {\n    channelMaxes[c] = 0.0;\n    const channelData = inputBuffer.getChannelData(c);\n    for (let s = 0; s < channelData.length; s += 1) {\n      if (Math.abs(channelData[s]) > channelMaxes[c]) {\n        channelMaxes[c] = Math.abs(channelData[s]);\n      }\n    }\n  }\n  return channelMaxes;\n}\n\nmodule.exports = {\n  calculateMaxValues,\n};\n", "const utils = require('./utils');\n\nfunction findAudioProcBufferSize(numSamplesIn) {\n  return [256, 512, 1024, 2048, 4096, 8192, 16384].reduce((a, b) => (\n    Math.abs(b - numSamplesIn) < Math.abs(a - numSamplesIn) ? b : a));\n}\n\nfunction calculateLPFCoefficients(numCoefficients, upsampleFactor) {\n  const retCoefs = [];\n  const fcRel = 1.0 / (4.0 * upsampleFactor);\n  const coefsLim = Math.floor((numCoefficients - 1) / 2);\n  for (let n = -coefsLim; n <= coefsLim; n += 1) {\n    const wn = 0.54 + 0.46 * Math.cos((2.0 * Math.PI * n) / numCoefficients);\n    let hn = 0.0;\n    if (n === 0) {\n      hn = 2.0 * fcRel;\n    } else {\n      hn = Math.sin(2.0 * Math.PI * fcRel * n) / (Math.PI * n);\n    }\n    // Adapt windows & upsampler factor\n    hn = (wn * hn) * upsampleFactor;\n    retCoefs.push(hn);\n  }\n  return retCoefs;\n}\n\nfunction filterSample(sample, meterData) {\n  const { lpfBuffer, lpfCoefficients, upsampleFactor } = meterData;\n  const ret = [];\n  lpfBuffer.push(sample);\n  if (lpfBuffer.length >= lpfCoefficients.length) {\n    lpfBuffer.shift();\n  }\n  for (let nA = 0; nA < upsampleFactor; nA += 1) {\n    let nT = 0;\n    let retVal = 0;\n    for (let nc = nA; nc < lpfCoefficients.length; nc += upsampleFactor) {\n      retVal += (lpfCoefficients[nc] * lpfBuffer[lpfBuffer.length - 1 - nT]);\n      nT += 1;\n    }\n    ret.push(retVal);\n  }\n  return ret;\n}\n\nfunction audioOverSampleAndFilter(channelData, inputFs, meterData) {\n  let res = [];\n  // Initialize filter coefficients and buffer\n  if (meterData.lpfCoefficients.length <= 0) {\n    utils.log(`Initialing filter components for ITU-R BS.1770, fs: ${inputFs}`);\n    if (inputFs >= 96000) {\n      meterData.upsampleFactor = 2;\n    }\n    meterData.lpfCoefficients = calculateLPFCoefficients(33, meterData.upsampleFactor);\n    meterData.lpfBuffer = new Array(meterData.lpfCoefficients.length).fill(0.0);\n    utils.log(`Initialized lpfCoefficients lpfCoefficients=[${meterData.lpfCoefficients.join(',')}], and lpfBuffer: [${meterData.lpfBuffer.join(',')}]`);\n  }\n  for (let ni = 0; ni < channelData.length; ni += 1) {\n    // 1 input sample -> generated upsampleFactor samples\n    const samplesOut = filterSample(channelData[ni], meterData);\n    res = res.concat(samplesOut);\n  }\n  return res;\n}\n\nfunction calculateTPValues(inputBuffer, meterData) {\n  const { lastChannelTP, channelCount } = meterData;\n  const { sampleRate } = inputBuffer;\n  // Ini TP values\n  if (lastChannelTP.length <= 0) {\n    utils.log(`Initialing TP values for ${channelCount}channels`);\n    meterData.lastChannelTP = new Array(channelCount).fill(0.0);\n    // Decay time ms = 1700 and -20Db\n    const attFactor = Math.pow(10.0, -20 / 10.0);\n    const decayTimeS = 1700 / 1000;\n    meterData.decayFactor = Math.pow(attFactor, 1.0 / (sampleRate * decayTimeS));\n    utils.log(`Initialized with decayFactor ${meterData.decayFactor}`);\n  }\n  for (let c = 0; c < channelCount; c += 1) {\n    const channelData = inputBuffer.getChannelData(c);\n    // Process according to ITU-R BS.1770\n    const overSampledAndLPF = audioOverSampleAndFilter(channelData, sampleRate, meterData);\n    for (let s = 0; s < overSampledAndLPF.length; s += 1) {\n      lastChannelTP[c] *= meterData.decayFactor;\n      if (Math.abs(overSampledAndLPF[s]) > lastChannelTP[c]) {\n        lastChannelTP[c] = Math.abs(overSampledAndLPF[s]);\n      }\n    }\n  }\n  return lastChannelTP;\n}\n\nmodule.exports = {\n  findAudioProcBufferSize,\n  calculateLPFCoefficients,\n  filterSample,\n  audioOverSampleAndFilter,\n  calculateTPValues,\n};\n", "const markup = require('./markup');\nconst peakSample = require('./peak-sample');\nconst truePeak = require('./true-peak');\nconst utils = require('./utils');\n\nconst defaultConfig = {\n  borderSize: 2,\n  fontSize: 9,\n  backgroundColor: 'black',\n  tickColor: '#ddd',\n  labelColor: '#ddd',\n  gradient: ['red 1%', '#ff0 16%', 'lime 45%', '#080 100%'],\n  dbRange: 48,\n  dbTickSize: 6,\n  maskTransition: '0.1s',\n  audioMeterStandard: 'peak-sample', // Could be \"true-peak\" (ITU-R BS.1770) or \"peak-sample\"\n  refreshEveryApproxMs: 20,\n  peakHoldDuration: null,\n};\n\nfunction createMeterNode(sourceNode, audioCtx, options = {}) {\n  // eslint-disable-next-line prefer-object-spread\n  const config = Object.assign({}, defaultConfig, options);\n  const { refreshEveryApproxMs } = config;\n  const { channelCount, sampleRate } = sourceNode;\n\n  // Calculate refresh interval\n  const resfreshIntervalSamples = (refreshEveryApproxMs / 1000) * sampleRate * channelCount;\n  const bufferSize = utils.findAudioProcBufferSize(resfreshIntervalSamples);\n  const meterNode = audioCtx.createScriptProcessor(bufferSize, channelCount, channelCount);\n  sourceNode.connect(meterNode).connect(audioCtx.destination);\n  return meterNode;\n}\n\nfunction updateMeter(audioProcessingEvent, config, meterData) {\n  const { inputBuffer } = audioProcessingEvent;\n  const { audioMeterStandard, peakHoldDuration } = config;\n  let channelMaxes = [];\n\n  // Calculate peak levels\n  if (audioMeterStandard === 'true-peak') {\n    // This follows ITU-R BS.1770 (True Peak meter)\n    channelMaxes = truePeak.calculateTPValues(inputBuffer, meterData);\n  } else {\n    // Just get the peak level\n    channelMaxes = peakSample.calculateMaxValues(inputBuffer);\n  }\n  // Update peak & text values\n  for (let i = 0; i < channelMaxes.length; i += 1) {\n    meterData.tempPeaks[i] = channelMaxes[i];\n    if (channelMaxes[i] > meterData.heldPeaks[i]) {\n      meterData.heldPeaks[i] = channelMaxes[i];\n      if (peakHoldDuration) {\n        if (meterData.peakHoldTimeouts[i]) {\n          clearTimeout(meterData.peakHoldTimeouts[i]);\n        }\n        meterData.peakHoldTimeouts[i] = setTimeout(() => {\n          meterData.heldPeaks[i] = meterData.tempPeaks[i];\n        }, peakHoldDuration);\n      }\n    }\n  }\n}\n\nfunction createMeter(domElement, meterNode, options = {}) {\n  // eslint-disable-next-line prefer-object-spread\n  const config = Object.assign({}, defaultConfig, options);\n\n  const meterElement = markup.createContainerDiv(domElement, config);\n  const meterData = markup.createTicks(meterElement, config);\n\n  const { channelCount } = meterNode;\n\n  meterData.tempPeaks = new Array(channelCount).fill(0.0);\n  meterData.heldPeaks = new Array(channelCount).fill(0.0);\n  meterData.peakHoldTimeouts = new Array(channelCount).fill(null);\n  meterData.channelCount = channelCount;\n\n  meterData.channelBars = markup.createBars(meterElement, config, meterData);\n  meterData.channelMasks = markup.createMasks(meterElement, config, meterData);\n  meterData.textLabels = markup.createPeakLabels(meterElement, config, meterData);\n\n  if (config.audioMeterStandard === 'true-peak') {\n    meterData.lpfCoefficients = [];\n    meterData.lpfBuffer = [];\n    meterData.upsampleFactor = 4;\n    meterData.lastChannelTP = [];\n    meterData.decayFactor = 0.99999;\n  }\n\n  meterNode.onaudioprocess = (evt) => updateMeter(evt, config, meterData);\n  meterElement.addEventListener('click', () => {\n    meterData.heldPeaks.fill(0.0);\n  }, false);\n  markup.paintMeter(config, meterData);\n}\n\nmodule.exports = {\n  createMeterNode,\n  createMeter,\n};\n"],
  "mappings": "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",
  "names": ["tickWidth", "meterTop", "meterHeight", "meterWidth", "tickSpacing"]
}
